{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGMC,EAAOC,SAASC,cAAc,SAMpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAZPL,EAAKa,iBAAiB,UAiBtB,SAAsBC,GACpBA,EAAEC,iBAQF,IALA,IAAIC,EAAQC,OAAOjB,EAAKkB,SAASb,MAAMc,OACjCC,EAAOH,OAAOjB,EAAKkB,SAASE,KAAKD,OACjCE,EAASJ,OAAOjB,EAAKkB,SAASG,OAAOF,OAGlCG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCnB,EAAcmB,EAAGN,GACdO,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAEjBoB,EAAA3B,GAAS4B,OAAOC,QAAQ,qBAAoCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAEnEwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAElBoB,EAAA3B,GAAS4B,OAAOI,QAAQ,oBAAmCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAErEW,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["// Se importan la libreria notiflix.\nimport Notiflix from 'notiflix';\n\n// Se guarda en una variable el selector de html, con la clase form.\nconst form = document.querySelector('.form');\n\n// Se aÃ±ade el \"Event Listener\" al enviar el formulario.\nform.addEventListener('submit', OnFormSubmit);\n\n// Funcion proporcionada en la tarea, para crear las promesas.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Funcion usada al enviar el formulario.\nfunction OnFormSubmit(e) { \n  e.preventDefault();\n\n  // Se crean las variables, para los datos recibidos del formulario.\n  let delay = Number(form.elements.delay.value);\n  const step = Number(form.elements.step.value);\n  const amount = Number(form.elements.amount.value);\n\n  // Ciclo for para crear las promesas requeridas.\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        // Promesa creada con exito.\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // Promesa rechazada.\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","elements","value","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.bd68dddc.js.map"}